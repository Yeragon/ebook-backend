<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.loan.LoanMapper">

    <insert id="insertLoan" parameterType="org.example.loan.Loan">
        INSERT INTO loan (id, user_id, ebook_id, rental_start_date, expiration_date, status)
        VALUES (#{id}, #{userId}, #{ebookId}, #{rentalStartDate}, #{expirationDate}, #{status})
    </insert>

    <update id="returnLoan">
        UPDATE loan
        SET status = 'returned',
            return_date = NOW()
        WHERE user_id = #{userId}
          AND ebook_id = #{ebookId}
          AND status = 'active'
    </update>


    <select id="getActiveLoansByUser" parameterType="java.util.UUID" resultType="org.example.loan.LoanDTO">
    SELECT l.*,
           e.title,
           e.author,
           CASE WHEN e.stock > 0 THEN TRUE ELSE FALSE END AS available
    FROM loan l
             JOIN ebooks e ON l.ebook_id = e.id
    WHERE l.user_id = #{userId}
      AND l.status = 'active'
    ORDER BY l.rental_start_date DESC
</select>


    <select id="countActiveLoans" parameterType="java.util.UUID" resultType="int">
        SELECT COUNT(*) FROM loan
        WHERE user_id = #{userId} AND status = 'active'
    </select>

    <select id="countActiveLoansByEbook" parameterType="java.util.UUID" resultType="int">
        SELECT COUNT(*) FROM loan
        WHERE ebook_id = #{ebookId} AND status = 'active'
    </select>

    <select id="findActiveLoanByUserAndEbook" resultType="org.example.loan.Loan">
        SELECT * FROM loan
        WHERE user_id = #{userId}
          AND ebook_id = #{ebookId}
          AND status = 'active'
            LIMIT 1
    </select>

    <select id="findLoansExpiringInDays" resultType="org.example.loan.Loan">
        SELECT * FROM loan
        WHERE status = 'active'
          AND DATEDIFF(expiration_date, CURDATE()) = #{days}
    </select>

    <update id="updateLoanStatus">
        UPDATE loan
        SET status = #{status}
        WHERE user_id = #{userId}
          AND ebook_id = #{ebookId}
          AND status = 'active'
    </update>

    <select id="getDueSoonLoansByUser" resultType="org.example.loan.LoanDTO">
        SELECT l.*,
               e.title,
               e.author,
               CASE WHEN e.stock > 0 THEN TRUE ELSE FALSE END AS available
        FROM loan l
                 JOIN ebooks e ON l.ebook_id = e.id
        WHERE l.user_id = #{userId}
          AND (l.status = 'returned' OR l.status = 'active')
        ORDER BY l.rental_start_date DESC
    </select>



    <update id="incrementEbookStock">
        UPDATE ebooks
        SET stock = stock + 1
        WHERE id = #{ebookId}
    </update>


</mapper>
